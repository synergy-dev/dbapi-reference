openapi: 3.0.2

info:
  version: 1.0.0
  title: Synergy!データベースAPI
  description: |
    # はじめに
    Synergy!データベースAPI は外部のシステムから、Synergy! のデータベース（マスター・履歴）の読み出し、登録・更新・削除などを簡単に行うことができる API です。  
    Synergy! の豊富な機能を生かしたシステム開発を簡易・短期間に行うことが可能です。

    ## API の利用にあたって
    API をご利用いただく場合、事前に Synergy! の利用登録が必要になります。  
    利用登録がまだお済みでない方は [Synergy! 公式ページ](https://www.synergy-marketing.co.jp/cloud/synergy/)よりお問い合わせください。

    また、API の利用には [Synergy! データベース API 契約規定](https://docs.synergy-marketing.co.jp/dbapi-reference/contract-provisions.html) が適用され、API を利用すると契約規定に同意したものとみなされます。

    ## 認証
    管理画面上の API 管理からクライアント認証キー、クライアントシークレットの発行を行なってください。
    発行時アクセス可能な IP アドレスを設定することで、指定した IP アドレス以外からのリクエストを制限することができます。

    Synergy!データベースAPI にアクセスするためには、リクエストヘッダーに発行したクライアント認証キー、クライアントシークレットを使用して取得したアクセストークンを付与する必要があります。  
    アクセストークンは事前に Synergy! 認可サーバ (https://auth.paas.crmstyle.com/oauth2/token) から OAuth 2.0 のクライアント・クレデンシャルズフローにより取得します。

    ### アクセストークン取得

    #### リクエストURL
    ```
    https://auth.paas.crmstyle.com/oauth2/token
    ```

    #### リクエストヘッダー
    | フィールド名    | 内容                               |
    |---------------|-----------------------------------|
    | Content-Type  | application/x-www-form-urlencoded |
    | Authorization | 管理画面上の API 管理からクライアント認証キー、クライアントシークレットの発行が可能となります。 <br> クライアント認証キー、クライアントシークレットを:（コロン）で繋いで、base64 でエンコードした文字列を指定します。 |

    #### リクエストパラメーター
    | プロパティ名 | 型     | 説明 |
    |------------|--------|------|
    | grant_type | String | OAuth 2.0 の処理フローを表します。 <br> "client_credentials" を指定してください。 |
    | audience   | String | アクセスするAPIのドメインを表します。 <br> "https://db.paas.crmstyle.com" を指定してください。 |
    | scope      | String | アクセスするAPIの種別を表します。 <br> 複数指定する場合は半角スペースを scope の間に含めて指定してください。 |

    #### scope一覧
    |         scope 名        | アクセス可能なAPI                                          |
    |-------------------------|---------------------------------------------------------|
    | db:apidefinition:design | ・ApiDefinition <br> ・OpenApi <br> ・DatabaseDefinition |
    | db:openapi:read         | ・OpenApi                                               |
    | db:record:execute       | ・Record                                                |

    #### リクエストサンプル
    ```
    AUTHHEADER=`echo -n ${CLIENT_ID}:${CLIENT_SECRET} | base64 -w0`  
    SCOPES="db:apidefinition:design db:openapi:read db:record:execute"
    curl -i -X POST \
      -H "Authorization: Basic ${AUTHHEADER}" \
      -H "Content-Type: application/x-www-form-urlencoded" \
      https://auth.paas.crmstyle.com/oauth2/token \
      -d "grant_type=client_credentials&scope=${SCOPES}&audience=https://db.paas.crmstyle.com"
    ```

    #### レスポンス
    レスポンスは JSON 形式で返却されます。

    ##### レスポンスサンプル
    ```
    {
      "access_token": "{Access Token}",
      "expires_in": 3599,
      "scope": "db:apidefinition:design db:openapi:read db:record:execute",
      "token_type": "bearer"
    }
    ```

    ##### レスポンス JSON プロパティ
    | プロパティ名   | 型      | 説明                                                                    |
    |--------------|---------|------------------------------------------------------------------------|
    | access_token | String  | Synergy!データベースAPI にアクセスするためのアクセストークンです。              |
    | expires_in   | Integer | アクセストークンの有効期限が切れるまでの秒数を表します。 <br> 有効期限は1時間です。 |
    | scope        | String  | アクセストークンに含まれる scope の一覧を表します。                           |
    | token_type   | String  | トークンの種別を表します。 <br> bearer 固定です。                            |

    ### Synergy!データベースAPI リクエスト
    リクエストの際、Authorization ヘッダーにアクセストークンをセットしてください。
    #### listApiDefinition リクエストサンプル
    ```
    curl -X GET \
      -H "accept: application/json" \
      -H "Authorization: Bearer ${ACCESS_TOKEN}" \
      https://db.paas.crmstyle.com/apis/apidefinition.database/v1/accounts/{accountCode}/apidefinitions
    ```

    <SecurityDefinitions />

    ## ご利用までの流れ

    ### 1. 認証情報取得
    [認証](#section/はじめに/認証)をご参照ください。

    ### 2. Record 定義登録
    データモデルを [OpenAPI V3 Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md) 形式で定義し [ApiDefinition.putApiDefinition](#operation/putApiDefinition) から定義を登録します。  
    定義を登録することで Synergy! データベースに項目が作成され API に紐付けされます。Synergy! データベースに作成されている既存項目を定義登録に使用したい場合、[既存項目を API に定義する](#section/API) を参照してください。

    ### 3. Record 利用
    2で登録された API を [Record](#tag/Record) より実行してください。

    #### APIクライアントについて
    作成された API は [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) で定義されています。
    [OpenApi](#tag/OpenApi) より OpenAPI Document を取得することで、ご利用の開発言語に応じて API クライアントの自動生成が可能です。
    コード生成ツールは [OpenAPI.Tools](https://openapi.tools/) をご参照ください。

    ## リクエスト数制限
    同時リクエスト数の制限には、トークンバケットモデル（アカウントごとに、レート：10/sec、バースト：50）を採用しています。  
    ブロック発生時は、レスポンスコード：`429 Too Many Request` を返しますので、数分後に再度お試しください。

    ## 改訂履歴
    | 改訂日      | 更新内容 |
    |------------|---------|
    | 2020/05/19 | 初版作成 |
    
  termsOfService: https://docs.synergy-marketing.co.jp/dbapi-reference/contract-provisions.html
  contact:
    url: https://www.synergy-marketing.co.jp/cloud/synergy/
    email: api-support@i.msgs.jp
servers:
  - url: https://db.paas.crmstyle.com/
tags:
  - name: ApiDefinition
    description: |
      サーバ間連携用の独自の REST API を作成することができます。

  - name: OpenApi
    description: |
      ApiDefinition で作成した API 定義を OpenAPI Document 形式で参照することができます。

  - name: DatabaseDefinition
    description: |
      Synergy! 内に登録されているデータベース設定情報を参照することができます。

  - name: Record
    description: |
      ApiDefinition で作成した REST API を実行することができます。

  - name: Appendix
    description: |
      ## Synergy! 項目型一覧
      | Synergy! 項目型         | x-synergy-type              | 型      | 項目新規作成 | 備考 |
      |------------------------|-----------------------------|---------|:---------:|------|
      | Synergy!ID             | synergyId                   | integer | ×         | マスターデータベースを対象に API 定義する場合、プロパティ名を `id` にして定義してください |
      | HistoryID              | historyId                   | integer | ×         | 顧客データベースを対象に API 定義する場合、プロパティ名を `id` にして定義してください |
      | ＰＣメールアドレス型      | mailAddress                 | string  | ×          | email 形式<br>（e.g. synergy@example.com）|
      | 携帯メールアドレス型      | mobileMailAddress           | string  | ×          | email 形式<br>（e.g. synergy@example.com）|
      | 更新日時                | updatedDate                 | string  | ×          | ISO 8601 形式<br>（e.g. 2020-05-01T00:00:00+09:00）|
      | システム登録日時         | registeredDate              | string  | ×          | ISO 8601 形式<br>（e.g. 2020-05-01T00:00:00+09:00）|
      | メール受信拒否フラグ型    | mailRefusalFlag             | boolean | ×          | ご利用には Synergy! メール配信機能の契約が必要です |
      | ＰＣメールエラーカウント型 | mailAddressErrorCount       | integer | ×          | ご利用には Synergy! メール配信機能の契約が必要です |
      | 携帯メールエラーカウント型 | mobileMailAddressErrorCount | integer | ×          | ご利用には Synergy! メール配信機能の契約が必要です |
      | メルマガ解除フラグリスト型 | mlRefusalFlags              | array   | ×          | ご利用には Synergy! メール配信機能の契約が必要です |
      | 文字型                  | text                        | string  | ◯         |      |
      | 数値型                  | number                      | number  | ◯         |      |
      | 年月日型                | date                        | string  | ◯          | yyyy-MM-dd 形式（e.g. 2020-05-01）|
      | 月日型                  | monthDay                    | string  | ◯         | --MM-dd 形式（e.g. --05-01）|
      | タイムスタンプ型          | dateTime                    | string  | ◯         | ISO 8601 形式<br>（e.g. 2020-05-01T00:00:00+09:00）|
      | 単一選択型               | singleSelect                | array  | ◯          |      |
      | 複数選択型               | multipleSelect              | array   | ◯         |      |
      | パスワード型             | password                    | string  |  ◯         |      |
      | パスワードハッシュ型      | passwordHash                | string  | △          | ご利用には Synergy! のオプション契約が必要です |

      ## 既存項目を API に定義する
      Synergy!データベースAPI では、既に管理画面などからデータベースに設定されている項目を API に定義することができます。
      対象の項目名を [DatabaseDefinition](#tag/DatabaseDefinition) から取得し、`x-synergy-mapping` にセットしてください。

      ##### 既存項目マッピングサンプル
      ```
      "spec": {
        ...
        "schema": {
          "properties": {
            "existingTxtColumn": {
              "x-synergy-mapping": "_col1",
              "type": "string"
            },
            "existingDateColumn": {
              "x-synergy-mapping": "_col2",
              "type": "string",
              "format": "date"
            },
            "existingPasswordColumn": {
              "x-synergy-mapping": "_col3",
              "x-synergy-type": "password"
            }
            "existingSingleSelectColumn": {
              "x-synergy-mapping": "_col4",
              "x-synergy-type": "singleSelect"
            }
          }
        }
      }
      ```

      ## オペレータ一覧
      | オペレータ      | 説明                       |
      | ------------- | -------------------------- |
      | eq            | 等しい                     |
      | notEq         | 等しくない                 |
      | isNull        | 対象が Null である         |
      | lt            | より小さい                 |
      | lte           | 以下                       |
      | gt            | より大きい                 |
      | gte           | 以上                       |
      | in            | いずれかと等しい <br> ※ 右辺に複数の値を設定可能 |
      | notIn         | いずれとも等しくない <br> ※ 右辺に複数の値を設定可能 |
      | contains      | 含んでいる                |
      | notContains   | 含んでいない             |
      | startsWith    | 対象の文字列で始まる       |
      | notStartsWith | 対象の文字列で始まらない   |
      | endsWith      | 対象の文字列で終わる       |
      | notEndsWith   | 対象の文字列で終わらない   |
      | containsEvery | 対象をすべて含んでいる <br> ※ 右辺に複数の値を設定可能 |
      | containsSome  | 対象のいずれかを含んでいる <br> ※ 右辺に複数の値を設定可能 |

      ## 型ごとの使用可能オペレータ
      | 型                    | eq, <br> notEq | isNull | lt, lte, <br> gt, gte | in, <br> notIn | contains, <br> notContains | startsWith, <br> notStartsWith, <br> endsWith, <br> notEndsWith | containsEvery, <br> containsSome |
      |-----------------------|----------------|--------|-----------------------|----------------|---------------------------|------------------------------------------------------------------|----------------------------------|
      | Synergy!ID            | ○              | ×      | ○                     | ○              | ×                         | ×                                                                | ×                                |
      | HistoryID             | ○              | ×      | ○                     | ○              | ×                         | ×                                                                | ×                                |
      | ＰＣメールアドレス型      | ○             | ○      | ○                     | ○              | ○                         | ○                                                                | ×                                |
      | 携帯メールアドレス型      | ○             | ○      | ○                     | ○              | ○                         | ○                                                                | ×                                |
      | 更新日時                | ○             | ×      | ○                     | ○              | ×                         | ×                                                                | ×                                |
      | システム登録日時         | ○             | ×      | ○                     | ○              | ×                         | ×                                                                | ×                                |
      | メール受信拒否フラグ型    | ○             | ×      | ×                     | ×              | ×                         | ×                                                                | ×                                |
      | ＰＣメールエラーカウント型 | ○             | ×      | ○                     | ○              | ×                         | ×                                                                | ×                                |
      | 携帯メールエラーカウント型 | ○             | ×      | ○                     | ○              | ×                         | ×                                                                | ×                                |
      | メルマガ解除フラグリスト型 | ×             | ×      | ×                     | ×              | ○                         | ×                                                                | ○                                |
      | 文字型                  | ○             | ○      | ○                     | ○              | ○                         | ○                                                                | ×                                |
      | 数値型                  | ○             | ○      | ○                     | ○              | ×                         | ×                                                                | ×                                |
      | 年月日型                | ○             | ○      | ○                     | ○              | ×                         | ×                                                                | ×                                |
      | 月日型                  | ○             | ○      | ○                     | ○              | ×                         | ×                                                                | ×                                |
      | タイムスタンプ型         | ○             | ○      | ○                     | ○              | ×                         | ×                                                                | ×                                |
      | 単一選択型              | ○             | ○      | ○                     | ○              | ×                         | ×                                                                | ×                                |
      | 複数選択型              | ×             | ×      | ×                     | ×              | ○                         | ×                                                                | ○                                |

components:
  schemas:
    ObjectMeta:
      description: |
        オブジェクトに共通のメタデータ
      type: object
      required:
        - kind
        - name
      properties:
        apiVersion:
          description: |
            API のバージョン
          type: string
        kind:
          description: |
            オブジェクト種別
          type: string
        accountCode:
          description: |
            API 管理画面に記載されたアカウントコード
          type: string
          pattern: "^[a-z]+$"
        name:
          description: |
            オブジェクト名です。  
            同種のオブジェクト（apiVersion, kind, accountCode 内）で一意な名前になっています。
          type: string
          maxLength: 50
          pattern: "^[a-z_][a-z0-9-_]*$"
        creationTimestamp:
          description: |
            オブジェクト生成時刻
          type: string
          format: date-time
          readOnly: true
        uid:
          type: string
          readOnly: true
          description: |
            オブジェクトの一意な ID
        resourceVersion:
          type: string
          description: |
            システムで採番されるオブジェクトのバージョン番号。  
            更新対象リソースにこの値を含めると楽観的ロックの検証が行われます。

    ListMeta:
      description: |
        一覧返却時のメタデータです。  
        ページング用の項目などが設定されます。
      type: object
      properties:
        continueToken:
          description: |
            次の一覧を取得するためのトークンです。  
            リストが末尾の場合は設定されません。
          type: string

    ApiDefinition:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/ObjectMeta"
        spec:
          $ref: "#/components/schemas/ApiDefinitionSpec"
        status:
          $ref: "#/components/schemas/ApiDefinitionStatus"
      example:
        metadata:
          kind: ApiDefinition
          name: api1
          apiVersion: database/v1
          accountCode: xxxxx
          creationTimestamp: '2019-12-05T08:08:55.261Z'
          uid: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          resourceVersion: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        spec:
          resources:
            main:
              mapping: _customer
              type: customerDb
          schema:
            properties:
              id:
                x-synergy-type: synergyId
                x-synergy-mapping: _synergyId
                type: integer
              email:
                x-synergy-type: mailAddress
                x-synergy-mapping: _mailAddress
                type: string
                format: email
              createdAt:
                x-synergy-type: registeredDate
                x-synergy-mapping: _registeredDate
                type: string
                format: date-time
              updatedAt:
                x-synergy-type: updatedDate
                x-synergy-mapping: _updatedDate
                type: string
                format: date-time
              name:
                x-synergy-type: text
                x-synergy-mapping: api1_name
                type: string
              age:
                x-synergy-type: number
                x-synergy-mapping: api1_age
                type: number
              birthday:
                x-synergy-type: date
                x-synergy-mapping: api1_birthday
                type: string
                format: date
              multipleSelect:
                x-synergy-type: multipleSelect
                x-synergy-mapping: api1_multiple1
                x-synergy-select-value-definitions:
                - value: 1
                  label: select1
                  hasExtraText: false
                - value: 2
                  label: select2
                  hasExtraText: true
                type: array
                items:
                  type: object
                  properties:
                    extraText:
                      type: string
                    value:
                      type: integer
          status:
            ready:
              lastUpdatedTimestamp: '2020-05-12T10:05:53.658468Z'
              status: true
              message: api is ready.
            databaseDefinitionSync:
              lastUpdatedTimestamp: '2020-05-12T10:05:53.658468Z'
              status: true
              message: success.

    SynergySelectValueDefinition:
      description: |
        単一選択型, 複数選択型で利用できる選択定義です。
      type: object
      properties:
        value:
          type: integer
          minimum: 1
          description: |
            選択肢の値
        label:
          type: string
          description: |
            選択肢の表示名
        hasExtraText:
          type: boolean
          default: false
          description: |
            `true` 補助テキスト有  
            `false` 補助テキスト無
      required:
        - value
        - label
        - hasExtraText

    DatabaseResource:
      type: object
      properties:
        mapping:
          type: string
          pattern: "^[_a-z][a-zA-Z0-9_]*$"
          maxLength: 50
          description: |
            データベース名。  
            アンダースコアから始まるデータベース名は予約されており、データベース新規作成時に指定することはできません。
        type:
          type: string
          enum:
            - customerDb
            - historyDb
          description: |
            データベース種別。

            | 定義名      | 説明              |
            |------------|------------------|
            | customerDb | マスターデータベース |
            | historyDb  | 履歴型データベース  |
      required:
        - mapping
        - type

    ApiDefinitionSpec:
      type: object
      properties:
        resources:
          description: |
            データベース設定
          type: object
          properties:
            main:
              $ref: "#/components/schemas/DatabaseResource"
        schema:
          $ref: "#/components/schemas/ApiResourceSchema"

    ApiDefinitionStatus:
      type: object
      description: |
        API 定義のステータス。読み取り専用。  
        データベース設定情報適用中などready.statusがtrueでない際にはAPIを利用することはできません。
      properties:
        ready:
          $ref: "#/components/schemas/ReadyStatus"
        databaseDefinitionSync:
          $ref: "#/components/schemas/DatabaseDefinitionSyncStatus"


    ReadyStatus:
      type: object
      description: |
        対象オブジェクトが有効な状態かどうかを示すステータス
      properties:
        lastUpdatedTimestamp:
          type: string
          format:  date-time 
          description: |
            ステータス更新時刻
        status:
          type: boolean
          description: |
            対象の状態
        message:
          type: string
          description: |
            対象ステータスについての説明

    DatabaseDefinitionSyncStatus:
      type: object
      description: |
        API 定義で指定した項目がデータベース設定情報に反映されているかを示すステータス
      properties:
        lastUpdatedTimestamp:
          type: string
          format:  date-time 
          description: |
            ステータス更新時刻
        status:
          type: boolean
          description: |
            対象の状態
        message:
          type: string
          description: |
            対象ステータスについての説明


    ApiResourceSchema:
      type: object
      description: |
        プロパティ  
      properties:
        properties:
          type: object
          maxProperties: 100
          additionalProperties:
            $ref: "#/components/schemas/ApiResourceProperty"

    ApiDefinitionList:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/ListMeta"
        items:
          type: array
          items:
            $ref: "#/components/schemas/ApiDefinition"

    ApiResourceProperty:
      type: object
      description: |
        [OpenAPI V3 Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v3.0/schema.yaml) の拡張サブセット  
        以下の制約があります。  

        | type          | 制約                                 |
        |---------------|-------------------------------------|
        | array         | 単一・複数選択型を利用する場合のみ利用可能 |
        | object        | 単一・複数選択型を利用する場合のみ利用可能 |
        | not           | 利用不可                              |
        | allof         | 利用不可                              |
        | oneof         | 利用不可                              |
        | anyof         | 利用不可                              |
        | discriminator | 利用不可                              |
        | externalDocs  | 利用不可                              |
        | xml           | 利用不可                              |
      properties:
        x-synergy-type:
          type: string
          enum:
            - synergyId
            - text
            - number
            - date
            - monthDay
            - dateTime
            - singleSelect
            - multipleSelect
            - password
            - passwordHash
            - mailAddress
            - mobileMailAddress
            - updatedDate
            - registeredDate
            - mailRefusalFlag
            - mailAddressErrorCount
            - mobileMailAddressErrorCount
            - mlRefusalFlags
            - historyId
          description: |
            Synergy! 上の項目型。  
            [Synergy! 項目型一覧](#section/Synergy!)

        x-synergy-mapping:
          type: string
          pattern: "^[_a-z][a-zA-Z0-9_]*$"
          maxLength: 50
          description: |
            API に定義されるデータベース項目。
            * アンダースコアから始まる名前は管理画面など Synergy!データベースAPI 以外から生成された項目を指します。
            * x-synergy-mapping で指定された値がデータベースの項目名に存在しない場合、x-synergy-mapping の値で項目が新規作成されます。
              * API 上の項目名称は未指定時同様、プロパティ名が使用されます。

        x-synergy-select-value-definitions:
          type: array
          items:
            $ref: "#/components/schemas/SynergySelectValueDefinition"
          description: |
            単一選択型, 複数選択型で使用される選択肢の定義です。  
            選択型項目を新たに追加する場合や選択型項目の選択肢を変更する場合に定義してください。  
            ※ フォーム機能にて使用されている場合、選択肢の変更はできません。
        title:
          type: string
          description: 項目ラベル
        multipleOf:
          type: number
          minimum: 0
          exclusiveMinimum: true
        maximum:
          type: number
        exclusiveMaximum:
          type: boolean
          default: false
        minimum:
          type: number
        exclusiveMinimum:
          type: boolean
          default: false
        maxLength:
          type: integer
          minimum: 0
        minLength:
          type: integer
          minimum: 0
          default: 0
        pattern:
          type: string
          format: regex
        maxItems:
          type: integer
          minimum: 0
        minItems:
          type: integer
          minimum: 0
          default: 0
        uniqueItems:
          type: boolean
          default: false
        maxProperties:
          type: integer
          minimum: 0
        minProperties:
          type: integer
          minimum: 0
          default: 0
        required:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
        enum:
          type: array
          items: {}
          minItems: 1
          uniqueItems: false
        type:
          type: string
          enum:
            - array
            - boolean
            - integer
            - number
            - object
            - string
        items:
          $ref: "#/components/schemas/ApiResourceProperty"
        properties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ApiResourceProperty"
        description:
          type: string
        format:
          type: string
        default: {}
        nullable:
          type: boolean
          default: false
        readOnly:
          type: boolean
          default: false
        writeOnly:
          type: boolean
          default: false
        example: {}
        deprecated:
          type: boolean
          default: false

    DatabaseDefinitionList:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ListMeta'
        items:
          type: array
          items:
            $ref: '#/components/schemas/DatabaseDefinition'
      example:
        metadata: 
          continueToken: string
        items: 
          - metadata:
              apiVersion: database/v1
              kind: DatabaseDefinition
              accountCode: xxxxx
              name: _customer
              creationTimestamp: '2019-12-05T08:08:55.261Z'
              uid: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
              resourceVersion: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            spec:
              label: マスターデータベース
              type: customerDb
              columns:
              - name: _synergyId
                label: Synergy!ID
                type: synergyId
                synergySelectValueDefinitions: null
              - name: name
                label: api1_name
                type: text
                synergySelectValueDefinitions: null
              - name: multipleSelect
                label: api1_multiple1
                type: array
                synergySelectValueDefinitions: 
                  - value: 1
                    label: select1
                    hasExtraText: false
                  - value: 2
                    label: select2
                    hasExtraText: true
          - metadata:
              apiVersion: database/v1
              kind: DatabaseDefinition
              accountCode: xxxxx
              name: history_table
              creationTimestamp: '2019-11-05T08:00:00.000Z'
              uid: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
              resourceVersion: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            spec:
              label: 履歴型データベース
              type: historyDb
              columns:
              - name: _historyId
                label: HistoryID
                type: historyId
                synergySelectValueDefinitions: null
              - name: _synergyId
                label: Synergy!ID
                type: synergyId
                synergySelectValueDefinitions: null

    DatabaseDefinition:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/DatabaseDefinitionSpec'
      example:
        metadata:
          apiVersion: database/v1
          kind: DatabaseDefinition
          accountCode: xxxxx
          name: _customer
          creationTimestamp: '2019-12-05T08:08:55.261Z'
          uid: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          resourceVersion: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        spec:
          label: マスターデータベース
          type: customerDb
          columns:
          - name: _synergyId
            label: Synergy!ID
            type: synergyId
            synergySelectValueDefinitions: null
          - name: name
            label: api1_name
            type: text
            synergySelectValueDefinitions: null
          - name: multipleSelect
            label: api1_multiple1
            type: array
            synergySelectValueDefinitions: 
              - value: 1
                label: select1
                hasExtraText: false
              - value: 2
                label: select2
                hasExtraText: true

    DatabaseDefinitionSpec:
      type: object
      properties:
        label:
          type: string
        type:
          type: string
          enum:
            - customerDb
            - historyDb
          description: データベース種別
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ColumnDefinitionSpec'

    ColumnDefinitionSpec:
      type: object
      properties:
        name:
          type: string
          pattern: "^[_a-z][a-zA-Z0-9_]*$"
          maxLength: 50
        label:
          type: string
        type:
          type: string
          enum:
            - synergyId
            - text
            - number
            - date
            - monthDay
            - dateTime
            - singleSelect
            - multipleSelect
            - password
            - passwordHash
            - mailAddress
            - mobileMailAddress
            - updatedDate
            - registeredDate
            - mailRefusalFlag
            - mailAddressErrorCount
            - mobileMailAddressErrorCount
            - mlRefusalFlags
            - historyId
          description: Synergy! 上でのデータ型。
        synergySelectValueDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/SynergySelectValueDefinition'

    RecordQueryRequest:
      type: object
      properties:
        limit:
          description: |
            1リクエストで取得したい最大アイテム数を指定してください。
            未指定の場合、100 になります。
          type: integer
          default: 100
          maximum: 100
          minimum: 1
        offset:
          description: |
            開始位置を指定してください。
            未指定の場合、オフセットは省略されます。
          type: integer
          minimum: 0
          default: 0
        filter:
          $ref: '#/components/schemas/RecordQueryFilter'
        order:
          description: |
            ソートキーとなるプロパティを指定してください。  
            未指定の場合、ASC（昇順）となります。  

            __並び替えキーワード__
            * ASC（昇順）
            * DESC（降順）
          type: array
          maxItems: 2
          items:
            type: string

    RecordCountRequest:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/RecordQueryFilter'

    RecordQueryFilter:
      type: object
      additionalProperties: true
      maxProperties: 20
      description: |
        ## 検索条件の設定
        filter オブジェクトを活用することで SQL の WHERE 句のように条件を設定することができ、柔軟かつ複雑なクエリの構築が可能です。

        ### filter オブジェクトの命名規則
        filter オブジェクトの項目名は `{propertyName}_{operator} ` のルールで命名されます。
        #### 例：名前が山田太郎のレコード
        ```
        "filter": {
          "name_eq": "山田太郎"
        }
        ```

        ### オペレータ一覧
        [オペレータ一覧](#section/オペレータ一覧)

        ### AND オブジェクト
        filter オブジェクト内の各オブジェクトは AND 句で結ばれています。  
        そのため、通常 AND オブジェクトは不要です。
        ##### 例：年齢が20歳以上 かつ 60歳以下のレコード
        ```
        "filter": {
          "age_gte": 20,
          "age_lte": 60
        }
        ```
        #### AND オブジェクトが必要な場合
        `contains` オペレータまたは `notContains` オペレータを複数使用する場合、同一オペレータを複数指定することはできないため、AND オブジェクトを使用する必要があります。
        ##### 例： メールアドレスに "@example.com", "@example.co.jp" が含まれないレコード
        ```
        "filter": {
          "AND": [
            {
              "email_notContains": "@example.com"
            },
            {
              "email_notContains": "@example.co.jp"
            }
          ]
        }
        ```

        ### OR オブジェクト
        配列内の各オブジェクトを使用した論理和を求めます。  
        #### 例：メールアドレスの末尾が "@example.com" または "@example.co.jp" のレコード
        ```
        "filter": {
          "OR": [
            {
              "email_endsWith": "@example.com"
            },
            {
              "email_endsWith": "@example.co.jp"
            }
          ]
        }
        ```

        ### オブジェクト上限数
        | 項目   |  上限数  |
        | ---- | ---- |
        | 設定可能な filter オブジェクト数  |  20  |
        | AND / OR の配列要素上限数  |  10  |

    ErrorResponseSchema:
      type: object
      properties:
        timestamp:
          description: エラー発生時刻
          type: string
        status:
          description: ステータスコード
          type: integer
        error:
          description: エラー内容
          type: string
        message:
          description: エラーメッセージ
          type: string
        path:
          description: エラーが発生した URL パス
          type: string

  parameters:
    accountCode:
      name: accountCode
      in: path
      description: |
        API 管理画面に記載されたアカウントコード
      examples:
        xxxxx:
          value: xxxxx
      required: true
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: |
        1リクエストで取得したい最大アイテム数を指定してください。  
        未指定の場合、100 になります。
      required: false
      schema:
        type: integer
        default: 100
        maximum: 100
        minimum: 1
    continueToken:
      name: continueToken
      in: query
      description: |
        ページ送りのためのパラメーターです。  
        取得アイテム数が `limit` で指定した最大アイテム数を超過した場合に値が返却されます。
        `continueToken` をリクエストパラメーターに指定することで `limit` 以降のアイテムを取得できます。
      required: false
      schema:
        type: string

  securitySchemes:
    oauth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: "https://auth.paas.crmstyle.com/oauth2/token"
          refreshUrl: "https://auth.paas.crmstyle.com/oauth2/token"
          scopes:
            db:apidefinition:design: ApiDefinition 全般実行、OpenApi 定義参照、データベース設定情報参照
            db:openapi:read: OpenApi 定義参照のみ可能
            db:record:execute: Record 全般実行
    bearer:
      type: http
      scheme: bearer

paths:
  /apis/apidefinition.database/v1/accounts/{accountCode}/apidefinitions:
    parameters:
      - $ref: "#/components/parameters/accountCode"
      - $ref: "#/components/parameters/continueToken"
      - $ref: "#/components/parameters/limit"
    get:
      tags:
        - ApiDefinition
      description: 登録されている API 定義の一覧を取得します。
      operationId: listApiDefinition
      security:
        - oauth:
            - db:apidefinition:design
        - bearer: []
      responses:
        200:
          description: API 定義取得成功時のレスポンスです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiDefinitionList"
        400:
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        401:
          description: アクセストークンが設定されていないか不正な値です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        403:
          description: リソースにアクセスする権限が不足しています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        429:
          description: アクセス回数が制限数を超過しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"

  /apis/apidefinition.database/v1/accounts/{accountCode}/apidefinitions/{name}:
    parameters:
      - $ref: "#/components/parameters/accountCode"
      - name: name
        in: path
        description: API 定義名
        required: true
        schema:
          type: string
    put:
      tags:
        - ApiDefinition
      description: |
        API 定義を登録・更新します。

        登録済みの API 定義にプロパティを追加・削除することで API 定義を更新することができます。  
        なお、プロパティを削除しても定義していたデータベース項目は削除されません。

        ## API 定義について
        Request samples を参考に API 定義を JSON 文字列で構築してリクエストボディに指定し、  
        リクエストヘッダーの `Content-Type` に `application/json` を指定してリクエストしてください。

        ### データベースの設定
        `spec.resources.main` にデータベースの名称および種別をセットします。

        #### データベース名（mapping）について
        * 既存の Synergy! 上のデータベースが対象の場合  
           [DatabaseDefinition](#tag/DatabaseDefinition) より定義したいデータベースの名称を取得して `mapping` にセットしてください。

        * 新しくデータベースを作成して定義を行う場合  
           存在しないデータベース名を `mapping` にセットすることで、データベースを新規作成して API に定義することができます。  
           新規作成できるのは type が historyDb の履歴型データベースのみです。  
           アンダースコアから始まるデータベース名は予約されており、データベース新規作成時に指定することはできません。

        #### データベース種別（type）について
        定義したいデータベースのデータベース種別を `type` にセットしてください。  
        参照型データベースは使用できません。

        | 定義名      | 説明              |
        |------------|------------------|
        | customerDb | マスターデータベース |
        | historyDb  | 履歴型データベース  |

        ### プロパティの定義
        `spec.schema.properties` にプロパティ名および型をセットします。

        #### プロパティ名について
        定義対象のプロパティ名（key）にセットしてください。  
        プロパティ名は英小文字で始まり英数字またはアンダースコアで構成される必要があります。`pattern: [a-z][a-zA-Z0-9_]*`  
        新規作成可能な型かつ {API 定義名}_{プロパティ名} と同一の項目名がデータベースに存在しない場合、項目を新規作成して定義されます。

        例）API 定義名が `api1` プロパティ名が `age` の場合、データベース上の項目名は `api1_age` となります。
        ```
        "metadata": {
          ...
          "name": "api1"
        },
        "spec": {
          ...
          "resources": {
            "properties": {
              "age": {
                "type": "number"
              },
              ...
            }
          }
        }
        ```

        #### 型について
        定義対象項目の項目型を [Synergy! 項目型一覧](#section/Synergy!) を参考に `x-synergy-type` にセットしてください。
        * `文字型`、`数値型`、`年月日型`、`タイムスタンプ型`は `type` および `format` を指定することで、x-synergy-type を省略することができます。
        | Synergy! 項目型 | type   | format   |
        |----------------|--------|----------|
        | 文字型          | string | -        |
        | 数値型          | number | -        |
        | 年月日型        | string | date      |
        | 月日型          | string | month-day |
        | タイムスタンプ型 | string | date-time |

        #### 既存項目を定義する場合
        [既存項目を API に定義する](#section/API)

        ## 登録数上限
        | 項目   | 上限数 |
        | ---- | ---- |
        | 登録可能な最大 API 定義数  |  10  |
        | 1API のプロパティ（ApiDefinition.spec.schema.properties）数上限  |  100  |

      operationId: putApiDefinition
      security:
        - oauth:
            - db:apidefinition:design
        - bearer: []
      requestBody:
        description: API 定義
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiDefinition"
            example:
              metadata:
                kind: ApiDefinition
                apiVersion: database/v1
                name: api1
              spec:
                resources:
                  main:
                    mapping: _customer
                    type: customerDb
                schema:
                  properties:
                    id:
                      x-synergy-type: synergyId
                    email:
                      x-synergy-type: mailAddress
                    createdAt:
                      x-synergy-type: registeredDate
                    updatedAt:
                      x-synergy-type: updatedDate
                    name:
                      type: string
                    age:
                      type: number
                    birthday:
                      type: string
                      format: date
                    multipleSelect:
                      x-synergy-type: multipleSelect
                      x-synergy-select-value-definitions: 
                        - value: 1
                          label: "select1"
                          hasExtraText: false
                        - value: 2
                          label: "select2"
                          hasExtraText: true
      responses:
        200:
          description: API 定義登録成功時のレスポンスです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiDefinition"
        400:
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        401:
          description: アクセストークンが設定されていないか不正な値です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        403:
          description: リソースにアクセスする権限が不足しています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        409:
          description: API 定義の更新が競合しています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        429:
          description: アクセス回数が制限数を超過しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"

    get:
      tags:
        - ApiDefinition
      description: 指定した定義名と一致する API 定義を取得します。
      operationId: getApiDefinition
      security:
        - oauth:
            - db:apidefinition:design
        - bearer: []
      responses:
        200:
          description: API 定義取得成功時のレスポンスです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiDefinition"
        400:
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        401:
          description: アクセストークンが設定されていないか不正な値です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        403:
          description: リソースにアクセスする権限が不足しています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        404:
          description: 指定された API 定義は存在しません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        429:
          description: アクセス回数が制限数を超過しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"

    delete:
      tags:
        - ApiDefinition
      description: |
        指定された定義名と一致する API 定義を削除します。  
        API 定義を削除しても定義されていたデータベース項目は削除されません。
      operationId: deleteApiDefinition
      security:
        - oauth:
            - db:apidefinition:design
        - bearer: []
      responses:
        204:
          description: API 定義削除成功時のレスポンスです
        401:
          description: アクセストークンが設定されていないか不正な値です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        403:
          description: リソースにアクセスする権限が不足しています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        404:
          description: 指定された API 定義は存在しません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        429:
          description: アクセス回数が制限数を超過しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"

  /apis/apidefinition.database/v1/accounts/{accountCode}/apidefinitions/{name}/openapiv3: 
    parameters:
      - $ref: "#/components/parameters/accountCode"
      - name: name
        in: path
        description: API 定義名
        required: true
        schema:
          type: string
    get:
      tags:
        - OpenApi
      description: 指定された API 定義の OpenAPI Document を取得します。
      operationId: getOpenApi
      security:
        - oauth:
            - db:apidefinition:design
        - oauth:
            - db:openapi:read
        - bearer: []
      responses:
        200:
          description: OpenAPI Document 取得成功時のレスポンスです
          content:
            application/json:
              schema:
                type: object
            application/x-yaml:
              schema:
                type: object
            application/yaml:
              schema:
                type: object
        400:
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        401:
          description: アクセストークンが設定されていないか不正な値です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        403:
          description: リソースにアクセスする権限が不足しています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        404:
          description: 指定された API 定義は存在しません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        429:
          description: アクセス回数が制限数を超過しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"

  /apis/apidefinition.database/v1/accounts/{accountCode}/openapiv3:
    parameters:
      - $ref: "#/components/parameters/accountCode"
    get:
      tags:
        - OpenApi
      description: 登録されている全てのAPI定義が内包されたOpenAPI Documentを取得します。
      operationId: getAllOpenApi
      security:
        - oauth:
            - db:apidefinition:design
        - oauth:
            - db:openapi:read
        - bearer: []
      responses:
        200:
          description: OpenAPI Document 取得成功時のレスポンスです
          content:
            application/json:
              schema:
                type: object
            application/x-yaml:
              schema:
                type: object
            application/yaml:
              schema:
                type: object
        400:
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        401:
          description: アクセストークンが設定されていないか不正な値です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        403:
          description: リソースにアクセスする権限が不足しています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        429:
          description: アクセス回数が制限数を超過しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"

  /apis/apidefinition.database/v1/accounts/{accountCode}/databasedefinitions:
    parameters:
      - $ref: '#/components/parameters/accountCode'
      - $ref: "#/components/parameters/continueToken"
      - $ref: "#/components/parameters/limit"
    get:
      tags:
        - DatabaseDefinition
      description: Synergy! 内に登録されているデータベース設定情報の一覧を取得します。
      operationId: listDatabaseDefinition
      security:
        - oauth:
            - db:apidefinition:design
        - bearer: []
      responses:
        200:
          description: データベース設定情報取得成功時のレスポンスです
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseDefinitionList'
        400:
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        401:
          description: アクセストークンが設定されていないか不正な値です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        403:
          description: リソースにアクセスする権限が不足しています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        429:
          description: アクセス回数が制限数を超過しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"

  /apis/apidefinition.database/v1/accounts/{accountCode}/databasedefinitions/{name}:
    parameters:
      - $ref: '#/components/parameters/accountCode'
      - name: name
        in: path
        description: データベース名
        required: true
        schema:
          type: string
    get:
      tags:
        - DatabaseDefinition
      description: 指定されたデータベース設定情報を取得します。
      operationId: getDatabaseDefinition
      security:
        - oauth:
            - db:apidefinition:design
        - bearer: []
      responses:
        200:
          description: データベース設定情報定義成功時のレスポンスです
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseDefinition'
        400:
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        401:
          description: アクセストークンが設定されていないか不正な値です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        403:
          description: リソースにアクセスする権限が不足しています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        404:
          description: 指定されたデータベース設定情報は存在しません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        429:
          description: アクセス回数が制限数を超過しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"

  /apis/record.database/v1/accounts/{accountCode}/{name}/records:
    parameters:
      - $ref: "#/components/parameters/accountCode"
      - name: name
        in: path
        description: API 定義名
        required: true
        schema:
          type: string
    post:
      tags:
        - Record
      description: レコードを新規登録します。
      operationId: createRecord
      requestBody:
        description: 登録対象のレコード
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              birthday: "YYYY-MM-DD"
              multipleSelect:
              - value: 2
                extraText: test
              name: test-name
              email: xxxx@xxxx.com
              age: 20
      responses:
        200:
          description: レコード登録成功時のレスポンスです
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  birthday: "YYYY-MM-DD"
                  multipleSelect:
                  - value: 2
                    extraText: test
                  name: test-name
                  email: xxxx@xxxx.com
                  age: 20
        400:
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        401:
          description: アクセストークンが設定されていないか不正な値です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        429:
          description: アクセス回数が制限数を超過しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
      security:
        - oauth:
            - db:record:execute
        - bearer: []

  /apis/record.database/v1/accounts/{accountCode}/{name}/query:
    parameters:
      - $ref: "#/components/parameters/accountCode"
      - name: name
        in: path
        description: API 定義名
        required: true
        schema:
          type: string
    post:
      tags:
        - Record
      description: |
        レコードを検索します。  
        filter オブジェクトを使用することで検索条件を設定できます。
      operationId: queryRecords
      requestBody:
        description: 検索条件
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecordQueryRequest"
            example:
              limit: 5
              offset: 0
              filter:
                age_gte: 20
                age_lte: 60
              order:
                - id_desc
      responses:
        200:
          description: 検索結果成功時のレスポンスです
          content:
            application/json:
              schema:
                type: object
              example:
                items:
                  - id: 2
                    birthday: "YYYY-MM-DD"
                    multipleSelect:
                    - value: 2
                      extraText: string
                    name: string
                    email: xxxx@xxxx.com
                    age: 60
                  - id: 1
                    birthday: "YYYY-MM-DD"
                    multipleSelect:
                    - value: 1
                    name: string
                    email: xxxx@xxxx.com
                    age: 20
        400:
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        401:
          description: アクセストークンが設定されていないか不正な値です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        429:
          description: アクセス回数が制限数を超過しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
      security:
        - oauth:
            - db:record:execute
        - bearer: []

  /apis/record.database/v1/accounts/{accountCode}/{name}/count:
    parameters:
      - $ref: "#/components/parameters/accountCode"
      - name: name
        in: path
        description: API 定義名
        required: true
        schema:
          type: string
    post:
      tags:
        - Record
      description: |
        レコード件数を取得します。  
        filter オブジェクトを使用することで検索条件を設定できます。
      operationId: countRecords
      requestBody:
        description: 検索条件
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecordCountRequest"
            example:
              filter:
                age_gte: 20
                age_lte: 60
      responses:
        200:
          description: 検索結果取得成功時のレスポンスです
          content:
            application/json:
              schema:
                type: object
              example:
                count: 2
        400:
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        401:
          description: アクセストークンが設定されていないか不正な値です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        429:
          description: アクセス回数が制限数を超過しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
      security:
        - oauth:
            - db:record:execute
        - bearer: []

  /apis/record.database/v1/accounts/{accountCode}/{name}/records/{id}:
    parameters:
      - $ref: "#/components/parameters/accountCode"
      - name: name
        in: path
        description: API 定義名
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: レコード ID
        required: true
        schema:
          type: string
    get:
      tags:
        - Record
      description: ID で指定されたレコードを取得します。
      operationId: findRecord
      responses:
        200:
          description: 検索結果取得成功時のレスポンスです
          content:
            application/json:
              schema:
                type: object
              example:
                items:
                  - id: 2
                    birthday: "YYYY-MM-DD"
                    multipleSelect:
                    - value: 2
                      extraText: string
                    name: string
                    email: xxxx@xxxx.com
                    age: 20
        400:
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        401:
          description: アクセストークンが設定されていないか不正な値です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        404:
          description: 指定されたレコードは存在しません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        429:
          description: アクセス回数が制限数を超過しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
      security:
        - oauth:
            - db:record:execute
        - bearer: []

    patch:
      tags:
        - Record
      description: |
        ID で指定されたレコードを更新します。  
      operationId: patchRecord
      requestBody:
        description: |
          更新情報
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              birthday: "YYYY-MM-DD"
              multipleSelect:
              - value: 2
                extraText: string
              name: string
              email: xxxx@xxxx.com
              age: 25
      parameters:
        - name: fields
          in: query
          required: false
          schema:
            type: string
          description: |
            更新対象のフィールドをカンマ区切りで指定します。  
            指定されていない場合、リクエストボディで指定された JSON に含まれるフィールドがすべて更新対象になります。
      responses:
        200:
          description: 更新成功時のレスポンスです
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  birthday: "YYYY-MM-DD"
                  multipleSelect:
                  - value: 2
                    extraText: string
                  name: string
                  email: xxxx@xxxx.com
                  age: 25
        400:
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        401:
          description: アクセストークンが設定されていないか不正な値です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        429:
          description: アクセス回数が制限数を超過しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
      security:
        - oauth:
            - db:record:execute
        - bearer: []

    delete:
      tags:
        - Record
      description: ID で指定されたレコードを削除します。
      operationId: deleteRecord
      responses:
        204:
          description: レコード削除成功のレスポンスです
        400:
          description: 不正なリクエストです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        401:
          description: アクセストークンが設定されていないか不正な値です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        404:
          description: 対象レコードが存在しません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
        429:
          description: アクセス回数が制限数を超過しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSchema"
      security:
        - oauth:
            - db:record:execute
        - bearer: []
